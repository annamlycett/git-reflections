>>What happens when you initialize a repository?
Why do you need to do it?

Git creates a link to a directory.
You need to do it in order to make it work
before adding specific files to the repository
to use it for version control.

According to the documentation,
"this command creates an empty Git repository
- basically a .git directory with subdirectories
for objects, refs/heads, refs/tags and template files.
An initial HEAD file that references the HEAD
of the master branch is also created."


>>How is the staging area
different from the working directory and the repository?
What value do you think it offers?

It's an extra step that allows for additional control
over what goes into a given commit,
helping keep it more logical and organised.
The repository is where everything happens on Git,
while a working directory is where you actually are working.


>>How can you use the staging area to make sure you have one commit
per logical change?

You can break down problems that involve individual or groups of files
into logical chunks. Once a file is ready for a commit,
you can stage it. Once all files are ready, you can bulk-commit them
with only one commit message that joins them together.


>>What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

Branches can help with, i.a., creating backups, experimental features,
different language versions, accessible versions for users
with limitations, temporary campaigns and compliance
with individual client specifications.


>>How do the diagrams help you visualize the branch structure?

They make it easier to follow how the project evolves with a number of
different features and solutions developed potentially simultaneously.
Being aware of each commit's parent makes it a logical evolution,
while it would be all to easy to lose track of how the project got to
where it is at a given point in time.